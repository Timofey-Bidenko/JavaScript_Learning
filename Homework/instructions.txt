/* 
Вам необхідно написати функцію summarize(num), яка приймає на вхід число і повертає функцію, яка під час виклику додає це число до аргументу і повертає результат. Якщо аргумент не передано, то додається одиниця. Наприклад, якщо функція викликається з аргументом 5, то функція, що повертається, повинна при виклику з аргументом 3 повернути 8 (тому що 3 + 5 = 8) або 6, якщо аргумент не буде передано.

function summarize(a) {
    let count = 0
    return function(num) {
        
    }
}

let sum5 = summarize(5)
sum5(3) // 8
sum5() // 6
*/

/* 
Вам необхідно написати функцію counter(startValue, step), яка приймає на вхід два параметри - стартове значення лічильника і його крок. Функція повертає нову функцію, яка при кожному виклику збільшує лічильник на значення і повертає його поточне значення. Лічильник повинен мати методи increment, decrement і reset, які збільшують або зменшують значення на step і скидають значення до стартового, відповідно.

function counter() {
    return function() {
        return {
            increment() {},
            decrement() {},
        }
    }
}

let counter1 = counter()

// let count = counter1
// count.increment()

counter1().increment()
*/

/* 
Вам необхідно написати функцію sequence(fn, fn), яка приймає на вхід дві або більше функції і повертає нову функцію, яка викликає їх послідовно з результатом попереднього виклику. Результат останньої функції має бути повернутий новою функцією. Кожна функція повинна мати доступ до результату попередньої функції через замикання.

One special rule: we are running the sequence function just once after binding a sequence of functions

function sequence(...rest) {
    let result

    return function(arg) {
        rest.forEach((fn) => {
            fn(arg)
        })
    }
}

let sequenceFunc = sequence(sum, pow, increment)

let result = sequenceFunc(2)
*/